name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18.x'
  JAVA_VERSION: '17'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run integration tests
        run: npm run test:integration
        env:
          REACT_APP_ENV: test

      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage/

  analyze:
    name: Bundle Analysis
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Analyze bundle size
        run: |
          npm run build:analyze
          echo "Bundle size report generated"

      - name: Upload bundle stats
        uses: actions/upload-artifact@v3
        with:
          name: bundle-stats
          path: dist/report.html

  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: test
    env:
      ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Install dependencies
        run: npm ci

      - name: Configure environment
        run: |
          echo "REACT_APP_ENV=${{ env.ENVIRONMENT }}" >> .env
          cp .env.${{ env.ENVIRONMENT }} .env.local

      - name: Decode keystore
        if: env.ENVIRONMENT == 'production'
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          echo $ANDROID_KEYSTORE_BASE64 | base64 -d > android/app/release.keystore

      - name: Build Android release
        env:
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          cd android
          ./gradlew assembleRelease

      - name: Upload APK
        uses: actions/upload-artifact@v3
        with:
          name: android-release-${{ env.ENVIRONMENT }}
          path: android/app/build/outputs/apk/release/app-release.apk

      - name: Upload AAB
        if: env.ENVIRONMENT == 'production'
        uses: actions/upload-artifact@v3
        with:
          name: android-bundle-${{ env.ENVIRONMENT }}
          path: android/app/build/outputs/bundle/release/app-release.aab

  build-ios:
    name: Build iOS
    runs-on: macos-latest
    needs: test
    env:
      ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install pods
        run: |
          cd ios
          pod install

      - name: Configure environment
        run: |
          echo "REACT_APP_ENV=${{ env.ENVIRONMENT }}" >> .env
          cp .env.${{ env.ENVIRONMENT }} .env.local

      - name: Setup certificates
        if: env.ENVIRONMENT == 'production'
        env:
          IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
          IOS_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISION_PROFILE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        run: |
          # Create temporary keychain
          security create-keychain -p actions temp.keychain
          security list-keychains -s temp.keychain
          security default-keychain -s temp.keychain
          security unlock-keychain -p actions temp.keychain

          # Import certificate
          echo $IOS_CERTIFICATE_BASE64 | base64 -d > certificate.p12
          security import certificate.p12 -k temp.keychain -P $IOS_CERTIFICATE_PASSWORD -T /usr/bin/codesign

          # Import provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo $IOS_PROVISION_PROFILE_BASE64 | base64 -d > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision

      - name: Build iOS release
        run: |
          cd ios
          xcodebuild -workspace TriollMobile.xcworkspace \
            -scheme TriollMobile \
            -configuration Release \
            -archivePath build/TriollMobile.xcarchive \
            archive

      - name: Export IPA
        if: env.ENVIRONMENT == 'production'
        run: |
          cd ios
          xcodebuild -exportArchive \
            -archivePath build/TriollMobile.xcarchive \
            -exportPath build \
            -exportOptionsPlist ExportOptions.plist

      - name: Upload IPA
        if: env.ENVIRONMENT == 'production'
        uses: actions/upload-artifact@v3
        with:
          name: ios-release-${{ env.ENVIRONMENT }}
          path: ios/build/TriollMobile.ipa

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-android, build-ios]
    if: github.event.inputs.environment == 'staging' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    steps:
      - name: Download Android APK
        uses: actions/download-artifact@v3
        with:
          name: android-release-staging

      - name: Deploy to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_ANDROID_APP_ID }}
          token: ${{ secrets.FIREBASE_TOKEN }}
          groups: internal-testers
          file: app-release.apk
          releaseNotes: |
            Staging build from commit ${{ github.sha }}
            ${{ github.event.head_commit.message }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-android, build-ios]
    if: github.event.inputs.environment == 'production'
    environment: production
    steps:
      - name: Download Android AAB
        uses: actions/download-artifact@v3
        with:
          name: android-bundle-production

      - name: Download iOS IPA
        uses: actions/download-artifact@v3
        with:
          name: ios-release-production

      - name: Upload to Google Play Store
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
          packageName: com.triollmobile
          releaseFiles: app-release.aab
          track: internal
          status: draft
          releaseName: v${{ github.run_number }}

      - name: Upload to App Store Connect
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        run: |
          xcrun altool --upload-app \
            --type ios \
            --file TriollMobile.ipa \
            --apiKey $APP_STORE_CONNECT_API_KEY_ID \
            --apiIssuer $APP_STORE_CONNECT_ISSUER_ID

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment to ${{ github.event.inputs.environment || 'staging' }} ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
